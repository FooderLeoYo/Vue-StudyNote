1. 认识组件化
	件化是Vue.js中的重要思想
	它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。
	任何的应用都会被抽象成一颗组件树

2. 注册组件
	2.1 组件的使用分成三个步骤
		1. 创建组件构造器：Vue.extend({})
			const 构造器名字 = Vue.extend()创建的是一个组件构造器
			通常在创建组件构造器时，传入template代表我们自定义组件的模板
			该模板就是在使用到组件的地方，要显示的HTML代码
			通常使用模板字符串定义
			例子：
			  const cpnC = Vue.extend({
				template: ` // 这里用到模板字符串
				  <div>
					<h2>我是标题</h2>
					<p>我是内容, 哈哈哈哈</p>
					<p>我是内容, 呵呵呵呵</p>
				  </div>`
				})
		2. 注册组件：Vue.component('组件标签名'， 组件构造器名)
			调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称
			所以需要传递两个参数：1、注册组件的标签名 2、组件构造器
			例子：
			  Vue.component('my-cpn', cpnC)
		3. 使用组件
			例子：
			 <my-cpn></my-cpn>
			 <my-cpn></my-cpn>
			 <my-cpn></my-cpn>
			 <my-cpn></my-cpn>
			 ……

2. 全局组件和局部组件
	2.1 全局组件
	当我们通过调用Vue.component()注册组件时，组件的注册是全局的
	这意味着该组件可以在任意Vue示例下使用
	2.2 局部组件
		如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件
		例如：
		const app = new Vue({
			el: '#app',
			data: {
			  message: '你好啊'
			},
			components: {
			  // cpn使用组件时的标签名，cpnC是构造器名
			  cpn: cpnC
			}
		})

3. 父组件和子组件
	如果组件A被放在组件B的构造器里参与构造，那么A为子组件，B为父组件
	Vue实例可以被看作是一个特殊的组件，它的层级最高，因此又被成为“根组件”
	3.1 在父组件实例的作用域内，如果没注册（全局或局部）子组件，那么该子组件不能在父组件实例的作用域内使用
	3.2 注册组件语法糖
		主要是省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替组件构造器名
		3.2.1 语法糖注册全局组件
		例如：
		Vue.component('cpn1', { // 这里直接用对象作为参数
			template: `
			  <div>
				<h2>我是标题1</h2>
				<p>我是内容, 哈哈哈哈</p>
			  </div>
			`
		})
		3.2.2 语法糖注册局部组件
		例如：
		const app = new Vue({
			el: '#app',
			data: {
				message: '你好啊'
				},
			components: {
				'cpn2': { // 注册组件
					template: `
						<div>
							<h2>我是标题2</h2>
							<p>我是内容, 呵呵呵</p>
						</div>
					`
				}
			}
		})
	3.3 模板的分离写法
		分离的目的：使代码结构更清晰
		3.3.1 通过script标签分离
			注意:类型必须是text/x-template
			例子：
			// 创建模板
			<script type="text/x-template" id="cpn">
				<div>
					<h2>我是标题</h2>
					<p>我是内容,哈哈哈</p>
				</div>
			</script>
			// 使用模板
			Vue.component('cpn', {
				template: '#cpn'
			})
		3.3.2 使用<template>标签分离
			例子：
			// 创建模板
			<template id="cpn">
				<div>
					<h2>我是标题</h2>
					<p>我是内容,呵呵呵</p>
				</div>
			</template>
			// 使用模板
			Vue.component('cpn', {
				template: '#cpn'
			})

4. 组件数据存放
	4.1 组件对象的data属性
		组件对象也有一个data属性
		只是这个data属性必须是一个函数
		而且这个函数返回一个对象，对象内部保存着数据
		例子：
		Vue.component('cpn', {
			template: '#cpn',
			data() {
				return {
					title: 'abc'
				}
			}
		})
	4.2 为什么data在组件中必须是一个函数
		首先，如果不是一个函数，Vue直接就会报错。
		其次，本质原因在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响

5 父子组件间的数据传递
	5.1 为什么需要传递
		子组件是不能引用父组件或者Vue实例的数据的，但在开发中，往往一些数据确实需要从上层传递到下层：
		比如在一个页面中，我们从服务器请求到了很多的数据，其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示
		这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件）
	5.2 父传子：props基本用法
		props是子组件的组件构造器里的一个属性
		props的值有两种方式：
		方式一：字符串数组，数组中的字符串就是传递时的名称
		例子：
		// vue模板
		<div id="app">
			<cpn :cmessage="message" :cmovies="movies"></cpn> // 必须使用v-bind绑定，这里是简写
		</div>
		// 组件模板
		<template id="cpn">
			<div>
				// 组件模板的内容要用到vue实例中data的数据
				<p>{{cmovies}}</p>
				<h2>{{cmessage}}</h2>
			</div>
		</template>
		<script>
			// 组件构造器
			const cpn = {
				template: '#cpn',
				props: ['cmovies', 'cmessage'] // props实现vue实例向cpn传递数据，形式为字符串数组
			}
			// vue实例
			const app = new Vue({
				el: '#app',
				data: {
					message: '你好啊',
					movies: ['海王', '海贼王', '海尔兄弟']
				},
				components: {
					cpn // 注册cpn组件，此处为简写
				}
			})
		</script>
		方式二：对象，对象可以设置传递时的类型，也可以设置默认值等
		上面的例子中的props改为：
		props: {
			// 1. 写法一：只有类型限制
			cmovies: Array,
			cmessage: String,
			// 2. 写法二：限制类别、提供默认值、必传值（即当要使用本例中的cpn组件时，必须给cmessage赋值）
			cmessage: {
				type: String,
				default: 'aaaaaaaa',
				required: true
			},
			// 3. 类型是对象或者数组时, 默认值必须是一个函数
			cmovies: {
				type: Array,
				default() {
					return []
				}
			}
		}
	5.3 子传父：自定义事件
		自定义事件的流程：
		在子组件中，通过$emit()来向父组件发射一个自定义事件及相关参数
		在父组件中，通过v-on给子组件传过来的自定义事件绑定一个父组件中的方法
		最终实现：子组件中通过触发自定义事件，调用了父组件中被绑定到该自定义事件的那个方法
		例子：
		<!--vue模板（父组件模板）-->
		<div id="app">
		  <cpn @item-click="cpnClick"></cpn> // 将item-click和cpnClick绑定，实现父组件的cpnClick监听子组件的item-click
		</div>
		<!--子组件模板-->
		<template id="cpn">
		  <div>
			<button v-for="item in categories" // 遍历生成内容列表
					@click="btnClick(item)"> // 绑定btnClick，并将item传递给btnClick
			  {{item.name}}
			</button>
		  </div>
		</template>
		<script>
		  // 1.子组件
		  const cpn = {
			template: '#cpn',
			data() {
			  return {
				categories: [
				  {id: 'bbb', name: '手机数码'},
				  {id: 'ccc', name: '家用家电'},
				]
			  }
			},
			methods: {
			  btnClick(item) { // btnClick后无括号则默认接受item
				this.$emit('item-click', item) // 发射自定义事件item-click以及item给父组件模板
			  }
			}
		  }
		  // 2.vue实例（父组件）
		  const app = new Vue({
			el: '#app',
			components: {
			  cpn
			},
			methods: {
			  cpnClick(item) {
				console.log('cpnClick', item); 
			  }
			}
		  })
		</script>

6. 父子组件间的访问
	6.1 父组件访问子组件
		6.1.1 $children（用得很少）
		6.1.2 $refs
			1. 子组件处写：ref="自定义名"，如：
			<cpn ref="aaa"></cpn>
			2. 父组件访问处写：$refs.自定义名.想要的子组件属性
			console.log(this.$refs.aaa.name);
			3. ref除了可以绑定在子组件上，也可以绑定到div等普通元素上
			4. ref如果是绑定在组件中的，那么通过“this.$refs.自定义名字”获取到的是一个组件对象；如果是绑定在元素上则获取到的是一个元素对象
	6.2 子组件访问父组件：$parent（用得更少）
		

7. 插槽slot
	7.1 为什么需要插槽
		在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽
		组件的插槽也是为了让我们封装的组件更加具有扩展性
	7.2 插槽的基本使用
		1.插槽的基本使用 <slot></slot>
		2.可以添加默认值 <slot>button</slot>
		3.如果多个值 同时放入到组件进行替换时, 都能显示
		例子：
		  <div id="father">
			<child></child> <!-- 不写东西，则会插入默认值：button标签。如果没有默认值则只会显示普通组件内容 -->
			<child><span>自定义插入</span></child> <!-- 写了span标签，则会替换默认值 -->
			<child> <!-- 插入多个是能全部显示 -->
			  <i>自定义插入1</i>
			  <h1>自定义插入2</h1>
			</child>
		  </div>
		  <template id="child">
			<div>
			  <h2>普通组件</h2>
			  <slot><button>按钮</button></slot> 
			</div>
		  </template>
  	7.3 v-slot
		vue3.x版本以后使用v-slot，替换了之前的slot 和 slot-scope
		子组件处还是使用slot，父组件处原先写slot的地方换成v-slot
		简写：#。例如：v-slot:header 可以被重写为 #header
	7.4 具名插槽
		作用：用于指定插入的是哪一个插槽
		语法：
		1. 给子组件中的插槽添加一个name属性；
		2. 父组件中将要插入插槽的内容包裹在一个template中，再在template标签中通过v-slot绑定该name
		例子：
		<div id="father">
		  <child>
		    <template #center>
		      <span>标题</span>
		    </template>
		   <template #left>
		     <button>返回</button>
		   </template>
		  </child>
		</div>
		
		<template id="child">
		  <div>
		    <slot name="left"><span>左边</span></slot>
		    <slot name="center"><span>中间</span></slot>
		    <slot name="right"><span>右边</span></slot>
		  </div>
		</template>
	7.5 作用域插槽
		父组件替换插槽的标签，但是内容由子组件来提供
		7.5.1 编译作用域
			在父组件模板中的语句只能拿到父组件data中的数据，子组件同理
		7.5.2 作用域插槽的语法
			1. 子组件模板中的插槽标签中，添加：自定义名="子组件实例data中的目标数据属性名"
				例子：<slot :自定义名="子组件data属性名">
			2. 父组件使用子组件时，添加一个template标签并添加属性：#default="自定义名"，就可以使用子组件中的数据了
			例子：
				<child>
				  <template #default="自定义名">
				    <span>{{自定义名.子组件data属性名}}</span>
				  </template>
				</child>
