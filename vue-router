1. 渲染的发展阶段
	1.1 后端路由阶段
		服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示
		一个页面有自己对应的网址, 也就是URL，URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理.
		Controller进行各种处理, 最终生成HTML或者数据, 返回给前端，这就完成了一个IO操作
		渲染过程：用户在浏览器中输入一个url -> 后端服务器拿到url -> 后端服务器通过jsp技术直接写好包含html+css+java的网页，其中java部分的作用是从数据库中读取数据，并将它动态的放在网页中
		-> 后端服务器将生成好的网页返回给用户浏览器，返回的内容只有html+css
	1.2 前后端分离阶段
		随着Ajax的出现, 有了前后端分离的开发模式，后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中
		前端渲染：浏览器中显示的网页中的大部分内容，都是由前端写的js代码在浏览器中执行，最终渲染出来的网页
		渲染过程：用户在浏览器中输入一个url —> 浏览器到静态服务器中拿到html+css+js代码 -> html+css部分浏览器直接渲染 -> 浏览器执行部分的js代码拿到api请求 -> 后端服务器根据请求返回数据
		-> 浏览器拿到数据后执行剩余js代码创建各个元素并将拿到的数据插入到这些元素当中 -> 浏览器将生成好的内容进行渲染
	1.3 单页面富应用阶段（SPA）
		其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由，整个网页只有一个html页面
		静态服务器中的html+css+js代码只有一套
		渲染过程：用户在浏览器中输入一个url —> 浏览器到静态服务器中拿到唯一的一整套html+css+js代码 -> 用户再点击该页面中某个按钮生成了另一个url 
		-> 前端路由根据映射关系从之前获取的一整套代码中抽取对应的资源（组件）进行渲染而不是重新向静态服务器申请新的资源

2. vue-router
	2.1 步骤一: 安装vue-router
		npm install vue-router --save
