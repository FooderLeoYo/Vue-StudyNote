1. 什么是Promise
	Promise是异步编程的一种解决方案，一种很常见的场景应该就是网络请求

2. 基本语法
	  new Promise((resolve, reject) => {
		setTimeout(() => {
		  // 成功的时候调用resolve
		  resolve('成功')
		  // 失败的时候调用reject
		  reject('失败')
		}, 1000)
	  }).then((data) => { // 如果调用的是resolve，接着就会调用then
		// 想象有很多行的处理代码
		console.log(data);
		console.log(data);
	  }).catch((err) => {// 如果调用的是reject，接着就会调用catch
		console.log(err);
	  })

3. Promise的另一种写法
	省略catch，then中带两个函数
	  new Promise((resolve, reject) => {
		setTimeout(() => {
		  resolve('Hello Vuejs')
		  reject('error message')
		}, 1000)
	  // then函数中带了两个函数data和err
	  }).then(data => { // 调用resolve时执行data
		console.log(data);
	  }, err => { // 调用reject时执行err
		console.log(err);
	  })

4. Promise的all方法
	应用场景：当有两个以上异步请求，且要求这几个请求都完成才执行下一步
	例子：
	  Promise.all([ // Promise的all方法
		new Promise((resolve, reject) => { // 异步请求1
		  setTimeout(() => {
			resolve({name: 'why', age: 18})
		  }, 2000)
		}),
		new Promise((resolve, reject) => { // 异步请求2
		  setTimeout(() => {
			resolve({name: 'kobe', age: 19})
		  }, 1000)
		})
	  ]).then(results => { // 两个异步请求都完成的话才会执行then
		console.log(results);
	  })
	
