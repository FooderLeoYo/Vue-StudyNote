1. 什么是Promise
	Promise 是异步编程的一种解决方案，其实是一个构造函数
	自己身上有resolve、reject、all、race这几个方法，原型上有then、catch等方法
	一种很常见的场景应该就是网络请求
	
2. resolve方法
	resolve是对promise成功时的回调，它把promise的状态修改为fullfiled
	
3. reject方法
	reject是对promise失败的时的回调，他把promise的状态修改为rejected

4. then方法
	then方法可以分为接收一个参数或两个参数的两种写法：
	1. 1个参数
		then只处理promise成功时传递过来的参数，即promise成功时回调resolve后传递给then一个成功后的参数
	1. 2个参数
		then同时处理promise成功或失败时传递过来的参数
		这两个参数分别是两个函数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调
		也就是说then方法中接受两个回调，一个成功的回调函数，一个失败的回调函数，并且能在回调函数中拿到成功的数据和失败的原因
	
4. catch方法
	与Promise对象方法then方法并行的一个方法就是catch，在then只处理成功时传递过来的参数的情况下被使用
	与try  catch类似，catch就是用来捕获异常的，也就是效果和写在then的第二个参数里面一样
	但是，它还有另外一个作用：在执行resolve的回调时如果抛出异常了，那么并不会报错卡死js，而是会进到这个catch方法中
	
5. 示例
	5.1 then只处理promise成功时传递过来的参数
	  new Promise((resolve, reject) => {
		setTimeout(() => {
		  // 成功的时候调用resolve
		  resolve('成功')
		  // 失败的时候调用reject
		  reject('失败')
		}, 1000)
	  }).then(res => { // 如果调用的是resolve，接着就会调用then
		// 想象有很多行的处理代码
		// 打印结果是“成功”
		console.log(res);
		console.log(res);
	  }).catch(err => {// 如果调用的是reject，接着就会调用catch
	  	// 打印结果是“失败”
		console.log(err);
	  })

	5.2 then同时处理promise成功或失败时传递过来的参数
		  // 省略catch，then中带两个函数
		  new Promise((resolve, reject) => {
			setTimeout(() => {
			  resolve('Hello Vuejs')
			  reject('error message')
			}, 1000)
		  // then函数中带了两个函数res和err
		  }).then(res => { // 调用resolve时执行res
			console.log(res);
		  }, err => { // 调用reject时执行err
			console.log(err);
		  })

6. all方法
	应用场景：当有两个以上异步请求，且要求这几个请求都完成才执行下一步
	例子：
	  Promise.all([ // Promise的all方法
		new Promise((resolve, reject) => { // 异步请求1
		  setTimeout(() => {
			resolve({name: 'why', age: 18})
		  }, 2000)
		}),
		new Promise((resolve, reject) => { // 异步请求2
		  setTimeout(() => {
			resolve({name: 'kobe', age: 19})
		  }, 1000)
		})
	  ]).then(results => { // 两个异步请求都完成的话才会执行then
		console.log(results);
	  })
	
7. race方法
	all是等所有的异步操作都执行完了再执行then方法，那么race方法就是相反的
	谁先执行完成就先执行回调。先执行完的不管是进行了race的成功回调还是失败回调，其余的将不会再进入race的任何回调
